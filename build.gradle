plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.66'
}

version = mod_version
group = 'xfacthd.contex'

base {
    archivesName = 'ConnectedTextures'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jarJar.enable()

runs {
    configureEach {
        //systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSources.addAll project.sourceSets.main, project.sourceSets.test
    }

    client {
        workingDirectory project.file('run')
    }

    server {
        workingDirectory project.file('run_server')
    }

    data {
        workingDirectory project.file('run')

        programArguments.addAll '--mod', 'contex', '--all', '--output', file('src/test_generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets {
    test.resources {
        srcDir "src/test/resources"
        srcDir "src/test_generated/resources"
    }
}

dependencies {
    implementation("net.neoforged:neoforge:${neoforge_version}")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neoforge_version: neoforge_version,
            neoforge_version_range: neoforge_version_range,
            loader_version_range: loader_version_range,
            mod_version: mod_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

processTestResources {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

publishing {
    publications {
        register ('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
